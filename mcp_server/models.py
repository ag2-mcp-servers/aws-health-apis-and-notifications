# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:48:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class InvalidPaginationToken(RootModel[Any]):
    root: Any


class UnsupportedLocale(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(pattern=r'^\S+$', max_length=12)]):
    root: constr(pattern=r'^\S+$', max_length=12)


class AffectedAccountsList(RootModel[List[AccountId]]):
    root: List[AccountId]


class AggregateValue(RootModel[str]):
    root: str


class AvailabilityZone(
    RootModel[
        constr(pattern=r'[a-z]{2}\-[0-9a-z\-]{4,16}', min_length=6, max_length=18)
    ]
):
    root: constr(pattern=r'[a-z]{2}\-[0-9a-z\-]{4,16}', min_length=6, max_length=18)


class AvailabilityZones(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone]


class AwsAccountIdsList(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=50, min_length=1)


class Count(RootModel[int]):
    root: int


class EntityArn(RootModel[constr(pattern=r'.{0,1600}', max_length=1600)]):
    root: constr(pattern=r'.{0,1600}', max_length=1600)


class EntityArnList(RootModel[List[EntityArn]]):
    root: List[EntityArn] = Field(..., max_length=99, min_length=1)


class EntityStatusCode(Enum):
    IMPAIRED = 'IMPAIRED'
    UNIMPAIRED = 'UNIMPAIRED'
    UNKNOWN = 'UNKNOWN'


class EntityStatusCodeList(RootModel[List[EntityStatusCode]]):
    root: List[EntityStatusCode] = Field(..., max_length=3, min_length=1)


class EntityUrl(RootModel[str]):
    root: str


class EntityValue(RootModel[constr(pattern=r'.{0,1224}', max_length=1224)]):
    root: constr(pattern=r'.{0,1224}', max_length=1224)


class EntityValueList(RootModel[List[EntityValue]]):
    root: List[EntityValue] = Field(..., max_length=99, min_length=1)


class EventAggregateField(Enum):
    eventTypeCategory = 'eventTypeCategory'


class EventArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[a-z]+(-[a-z]+)?)?:health:[^:]*:[^:]*:event(?:/[\w-]+){3}',
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[a-z]+(-[a-z]+)?)?:health:[^:]*:[^:]*:event(?:/[\w-]+){3}',
        max_length=1600,
    )


class EventArnList(RootModel[List[EventArn]]):
    root: List[EventArn] = Field(..., max_length=10, min_length=1)


class EventDescription(RootModel[str]):
    root: str


class EventScopeCode(Enum):
    PUBLIC = 'PUBLIC'
    ACCOUNT_SPECIFIC = 'ACCOUNT_SPECIFIC'
    NONE = 'NONE'


class EventStatusCode(Enum):
    open = 'open'
    closed = 'closed'
    upcoming = 'upcoming'


class EventStatusCodeList(RootModel[List[EventStatusCode]]):
    root: List[EventStatusCode] = Field(..., max_length=6, min_length=1)


class EventType1(
    RootModel[constr(pattern=r'[^:/]{3,100}', min_length=3, max_length=100)]
):
    root: constr(pattern=r'[^:/]{3,100}', min_length=3, max_length=100)


class EventTypeCategory(Enum):
    issue = 'issue'
    accountNotification = 'accountNotification'
    scheduledChange = 'scheduledChange'
    investigation = 'investigation'


class EventTypeCategoryList(RootModel[List[EventTypeCategory]]):
    root: List[EventTypeCategory] = Field(..., max_length=10, min_length=1)


class EventTypeCode(
    RootModel[constr(pattern=r'[a-zA-Z0-9\_\-]{3,100}', min_length=3, max_length=100)]
):
    root: constr(pattern=r'[a-zA-Z0-9\_\-]{3,100}', min_length=3, max_length=100)


class EventTypeList(RootModel[List[EventType1]]):
    root: List[EventType1] = Field(..., max_length=10, min_length=1)


class HealthServiceAccessStatusForOrganization(RootModel[str]):
    root: str


class Locale(RootModel[constr(pattern=r'.{2,256}', min_length=2, max_length=256)]):
    root: constr(pattern=r'.{2,256}', min_length=2, max_length=256)


class MaxResults(RootModel[conint(ge=10, le=100)]):
    root: conint(ge=10, le=100)


class MaxResultsLowerRange(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MetadataKey(RootModel[constr(max_length=32766)]):
    root: constr(max_length=32766)


class MetadataValue(RootModel[constr(max_length=32766)]):
    root: constr(max_length=32766)


class NextToken(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9=/+_.-]{4,10000}', min_length=4, max_length=10000)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9=/+_.-]{4,10000}', min_length=4, max_length=10000)


class Region(RootModel[constr(pattern=r'[^:/]{2,25}', min_length=2, max_length=25)]):
    root: constr(pattern=r'[^:/]{2,25}', min_length=2, max_length=25)


class RegionList(RootModel[List[Region]]):
    root: List[Region] = Field(..., max_length=10, min_length=1)


class Service(RootModel[constr(pattern=r'[^:/]{2,30}', min_length=2, max_length=30)]):
    root: constr(pattern=r'[^:/]{2,30}', min_length=2, max_length=30)


class ServiceList(RootModel[List[Service]]):
    root: List[Service] = Field(..., max_length=10, min_length=1)


class String(RootModel[str]):
    root: str


class TagKey(RootModel[constr(pattern=r'.{0,127}', max_length=127)]):
    root: constr(pattern=r'.{0,127}', max_length=127)


class TagValue(RootModel[constr(pattern=r'.{0,255}', max_length=255)]):
    root: constr(pattern=r'.{0,255}', max_length=255)


class Timestamp(RootModel[datetime]):
    root: datetime


class XAmzTarget(Enum):
    AWSHealth_20160804_DescribeAffectedAccountsForOrganization = (
        'AWSHealth_20160804.DescribeAffectedAccountsForOrganization'
    )


class XAmzTarget1(Enum):
    AWSHealth_20160804_DescribeAffectedEntities = (
        'AWSHealth_20160804.DescribeAffectedEntities'
    )


class XAmzTarget2(Enum):
    AWSHealth_20160804_DescribeAffectedEntitiesForOrganization = (
        'AWSHealth_20160804.DescribeAffectedEntitiesForOrganization'
    )


class XAmzTarget3(Enum):
    AWSHealth_20160804_DescribeEntityAggregates = (
        'AWSHealth_20160804.DescribeEntityAggregates'
    )


class XAmzTarget4(Enum):
    AWSHealth_20160804_DescribeEventAggregates = (
        'AWSHealth_20160804.DescribeEventAggregates'
    )


class XAmzTarget5(Enum):
    AWSHealth_20160804_DescribeEventDetails = 'AWSHealth_20160804.DescribeEventDetails'


class XAmzTarget6(Enum):
    AWSHealth_20160804_DescribeEventDetailsForOrganization = (
        'AWSHealth_20160804.DescribeEventDetailsForOrganization'
    )


class XAmzTarget7(Enum):
    AWSHealth_20160804_DescribeEventTypes = 'AWSHealth_20160804.DescribeEventTypes'


class XAmzTarget8(Enum):
    AWSHealth_20160804_DescribeEvents = 'AWSHealth_20160804.DescribeEvents'


class XAmzTarget9(Enum):
    AWSHealth_20160804_DescribeEventsForOrganization = (
        'AWSHealth_20160804.DescribeEventsForOrganization'
    )


class XAmzTarget10(Enum):
    AWSHealth_20160804_DescribeHealthServiceStatusForOrganization = (
        'AWSHealth_20160804.DescribeHealthServiceStatusForOrganization'
    )


class XAmzTarget11(Enum):
    AWSHealth_20160804_DisableHealthServiceAccessForOrganization = (
        'AWSHealth_20160804.DisableHealthServiceAccessForOrganization'
    )


class XAmzTarget12(Enum):
    AWSHealth_20160804_EnableHealthServiceAccessForOrganization = (
        'AWSHealth_20160804.EnableHealthServiceAccessForOrganization'
    )


class DateTimeRange(BaseModel):
    from_: Optional[Timestamp] = Field(None, alias='from')
    to: Optional[Timestamp] = None


class DescribeAffectedAccountsForOrganizationRequest(BaseModel):
    eventArn: EventArn
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeAffectedAccountsForOrganizationResponse(BaseModel):
    affectedAccounts: Optional[AffectedAccountsList] = None
    eventScopeCode: Optional[EventScopeCode] = None
    nextToken: Optional[NextToken] = None


class DescribeEventDetailsRequest(BaseModel):
    eventArns: EventArnList
    locale: Optional[Locale] = None


class DescribeHealthServiceStatusForOrganizationResponse(BaseModel):
    healthServiceAccessStatusForOrganization: Optional[
        HealthServiceAccessStatusForOrganization
    ] = None


class EntityAggregate(BaseModel):
    count: Optional[Count] = None
    eventArn: Optional[EventArn] = None


class EntityAggregateList(RootModel[List[EntityAggregate]]):
    root: List[EntityAggregate]


class Event(BaseModel):
    arn: Optional[EventArn] = None
    availabilityZone: Optional[AvailabilityZone] = None
    endTime: Optional[Timestamp] = None
    eventScopeCode: Optional[EventScopeCode] = None
    eventTypeCategory: Optional[EventTypeCategory] = None
    eventTypeCode: Optional[EventTypeCode] = None
    lastUpdatedTime: Optional[Timestamp] = None
    region: Optional[Region] = None
    service: Optional[Service] = None
    startTime: Optional[Timestamp] = None
    statusCode: Optional[EventStatusCode] = None


class EventAccountFilter(BaseModel):
    awsAccountId: Optional[AccountId] = None
    eventArn: EventArn


class EventAggregate(BaseModel):
    aggregateValue: Optional[AggregateValue] = None
    count: Optional[Count] = None


class EventAggregateList(RootModel[List[EventAggregate]]):
    root: List[EventAggregate]


class EventArnsList(RootModel[List[EventArn]]):
    root: List[EventArn] = Field(..., max_length=50, min_length=1)


class EventDescriptionModel(BaseModel):
    latestDescription: Optional[EventDescription] = None


class EventDetailsErrorItem(BaseModel):
    errorMessage: Optional[String] = None
    errorName: Optional[String] = None
    eventArn: Optional[EventArn] = None


class EventList(RootModel[List[Event]]):
    root: List[Event]


class EventType(BaseModel):
    category: Optional[EventTypeCategory] = None
    code: Optional[EventTypeCode] = None
    service: Optional[Service] = None


class EventTypeCodeList(RootModel[List[EventTypeCode]]):
    root: List[EventTypeCode] = Field(..., max_length=10, min_length=1)


class EventTypeFilter(BaseModel):
    eventTypeCategories: Optional[EventTypeCategoryList] = None
    eventTypeCodes: Optional[EventTypeCodeList] = None
    services: Optional[ServiceList] = None


class EventTypeListModel(RootModel[List[EventType]]):
    root: List[EventType]


class OrganizationAffectedEntitiesErrorItem(BaseModel):
    awsAccountId: Optional[AccountId] = None
    errorMessage: Optional[String] = None
    errorName: Optional[String] = None
    eventArn: Optional[EventArn] = None


class OrganizationEntityFiltersList(RootModel[List[EventAccountFilter]]):
    root: List[EventAccountFilter] = Field(..., max_length=10, min_length=1)


class OrganizationEvent(BaseModel):
    arn: Optional[EventArn] = None
    endTime: Optional[Timestamp] = None
    eventScopeCode: Optional[EventScopeCode] = None
    eventTypeCategory: Optional[EventTypeCategory] = None
    eventTypeCode: Optional[EventTypeCode] = None
    lastUpdatedTime: Optional[Timestamp] = None
    region: Optional[Region] = None
    service: Optional[Service] = None
    startTime: Optional[Timestamp] = None
    statusCode: Optional[EventStatusCode] = None


class OrganizationEventDetailFiltersList(RootModel[List[EventAccountFilter]]):
    root: List[EventAccountFilter] = Field(..., max_length=10, min_length=1)


class OrganizationEventDetailsErrorItem(BaseModel):
    awsAccountId: Optional[AccountId] = None
    errorMessage: Optional[String] = None
    errorName: Optional[String] = None
    eventArn: Optional[EventArn] = None


class OrganizationEventFilter(BaseModel):
    awsAccountIds: Optional[AwsAccountIdsList] = None
    endTime: Optional[DateTimeRange] = None
    entityArns: Optional[EntityArnList] = None
    entityValues: Optional[EntityValueList] = None
    eventStatusCodes: Optional[EventStatusCodeList] = None
    eventTypeCategories: Optional[EventTypeCategoryList] = None
    eventTypeCodes: Optional[EventTypeList] = None
    lastUpdatedTime: Optional[DateTimeRange] = None
    regions: Optional[RegionList] = None
    services: Optional[ServiceList] = None
    startTime: Optional[DateTimeRange] = None


class OrganizationEventList(RootModel[List[OrganizationEvent]]):
    root: List[OrganizationEvent]


class DateTimeRangeList(RootModel[List[DateTimeRange]]):
    root: List[DateTimeRange] = Field(..., max_length=10, min_length=1)


class EventMetadata(RootModel[Optional[Dict[str, MetadataValue]]]):
    root: Optional[Dict[str, MetadataValue]] = None


class TagSet(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class AffectedEntity(BaseModel):
    awsAccountId: Optional[AccountId] = None
    entityArn: Optional[EntityArn] = None
    entityUrl: Optional[EntityUrl] = None
    entityValue: Optional[EntityValue] = None
    eventArn: Optional[EventArn] = None
    lastUpdatedTime: Optional[Timestamp] = None
    statusCode: Optional[EntityStatusCode] = None
    tags: Optional[TagSet] = None


class DescribeAffectedEntitiesForOrganizationFailedSet(
    RootModel[List[OrganizationAffectedEntitiesErrorItem]]
):
    root: List[OrganizationAffectedEntitiesErrorItem]


class DescribeAffectedEntitiesForOrganizationRequest(BaseModel):
    locale: Optional[Locale] = None
    maxResults: Optional[MaxResultsLowerRange] = None
    nextToken: Optional[NextToken] = None
    organizationEntityFilters: OrganizationEntityFiltersList


class DescribeEntityAggregatesRequest(BaseModel):
    eventArns: Optional[EventArnsList] = None


class DescribeEntityAggregatesResponse(BaseModel):
    entityAggregates: Optional[EntityAggregateList] = None


class DescribeEventAggregatesResponse(BaseModel):
    eventAggregates: Optional[EventAggregateList] = None
    nextToken: Optional[NextToken] = None


class DescribeEventDetailsFailedSet(RootModel[List[EventDetailsErrorItem]]):
    root: List[EventDetailsErrorItem]


class DescribeEventDetailsForOrganizationFailedSet(
    RootModel[List[OrganizationEventDetailsErrorItem]]
):
    root: List[OrganizationEventDetailsErrorItem]


class DescribeEventDetailsForOrganizationRequest(BaseModel):
    locale: Optional[Locale] = None
    organizationEventDetailFilters: OrganizationEventDetailFiltersList


class DescribeEventTypesRequest(BaseModel):
    filter: Optional[EventTypeFilter] = None
    locale: Optional[Locale] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeEventTypesResponse(BaseModel):
    eventTypes: Optional[EventTypeListModel] = None
    nextToken: Optional[NextToken] = None


class DescribeEventsForOrganizationRequest(BaseModel):
    filter: Optional[OrganizationEventFilter] = None
    locale: Optional[Locale] = None
    maxResults: Optional[MaxResultsLowerRange] = None
    nextToken: Optional[NextToken] = None


class DescribeEventsForOrganizationResponse(BaseModel):
    events: Optional[OrganizationEventList] = None
    nextToken: Optional[NextToken] = None


class DescribeEventsResponse(BaseModel):
    events: Optional[EventList] = None
    nextToken: Optional[NextToken] = None


class EntityList(RootModel[List[AffectedEntity]]):
    root: List[AffectedEntity]


class EventDetails(BaseModel):
    event: Optional[Event] = None
    eventDescription: Optional[EventDescriptionModel] = None
    eventMetadata: Optional[EventMetadata] = None


class OrganizationEventDetails(BaseModel):
    awsAccountId: Optional[AccountId] = None
    event: Optional[Event] = None
    eventDescription: Optional[EventDescriptionModel] = None
    eventMetadata: Optional[EventMetadata] = None


class TagFilter(RootModel[List[TagSet]]):
    root: List[TagSet] = Field(..., max_length=50)


class DescribeAffectedEntitiesForOrganizationResponse(BaseModel):
    entities: Optional[EntityList] = None
    failedSet: Optional[DescribeAffectedEntitiesForOrganizationFailedSet] = None
    nextToken: Optional[NextToken] = None


class DescribeAffectedEntitiesResponse(BaseModel):
    entities: Optional[EntityList] = None
    nextToken: Optional[NextToken] = None


class DescribeEventDetailsForOrganizationSuccessfulSet(
    RootModel[List[OrganizationEventDetails]]
):
    root: List[OrganizationEventDetails]


class DescribeEventDetailsSuccessfulSet(RootModel[List[EventDetails]]):
    root: List[EventDetails]


class EntityFilter(BaseModel):
    entityArns: Optional[EntityArnList] = None
    entityValues: Optional[EntityValueList] = None
    eventArns: EventArnList
    lastUpdatedTimes: Optional[DateTimeRangeList] = None
    statusCodes: Optional[EntityStatusCodeList] = None
    tags: Optional[TagFilter] = None


class EventFilter(BaseModel):
    availabilityZones: Optional[AvailabilityZones] = None
    endTimes: Optional[DateTimeRangeList] = None
    entityArns: Optional[EntityArnList] = None
    entityValues: Optional[EntityValueList] = None
    eventArns: Optional[EventArnList] = None
    eventStatusCodes: Optional[EventStatusCodeList] = None
    eventTypeCategories: Optional[EventTypeCategoryList] = None
    eventTypeCodes: Optional[EventTypeList] = None
    lastUpdatedTimes: Optional[DateTimeRangeList] = None
    regions: Optional[RegionList] = None
    services: Optional[ServiceList] = None
    startTimes: Optional[DateTimeRangeList] = None
    tags: Optional[TagFilter] = None


class DescribeAffectedEntitiesRequest(BaseModel):
    filter: EntityFilter
    locale: Optional[Locale] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeEventAggregatesRequest(BaseModel):
    aggregateField: EventAggregateField
    filter: Optional[EventFilter] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeEventDetailsForOrganizationResponse(BaseModel):
    failedSet: Optional[DescribeEventDetailsForOrganizationFailedSet] = None
    successfulSet: Optional[DescribeEventDetailsForOrganizationSuccessfulSet] = None


class DescribeEventDetailsResponse(BaseModel):
    failedSet: Optional[DescribeEventDetailsFailedSet] = None
    successfulSet: Optional[DescribeEventDetailsSuccessfulSet] = None


class DescribeEventsRequest(BaseModel):
    filter: Optional[EventFilter] = None
    locale: Optional[Locale] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
